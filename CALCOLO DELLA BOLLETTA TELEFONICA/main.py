# -*- coding: utf-8 -*-
"""Progetto_3.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1E_29rKrohB4CfeaWnmXa9u6iNPKTgJUf

#SPIEGAZIONE

Il file “telefonate.csv” contiene informazioni sulle telefonate effettuate in un mese da
alcuni clienti di un operatore di telefonia cellulare.

La prima riga contiene l&#39;intestazione delle colonne. Ogni riga riporta le
informazioni seguenti.
* Cod_Chiamante: un intero che identifica univocamente il
cliente che ha effettuato la chiamata
* Cod_Destinatario: un intero che identifica univocamente il
cliente che ha ricevuto la chiamata
* Cod_Cella_Chiamante: un intero che identifica l&#39;area nella
quale si trova il cliente che ha effettuato la chiamata
* Cod_Cella_Destinatario: un intero che identifica l&#39;area nella
quale si trova il cliente che ha ricevuto la chiamata
* GGI:HHI:MMI rappresentano rispettivamente il giorno, l&#39;ora
e il minuto in cui e&#39; iniziata la chiamata
* GGF:HHF:MMF rappresentano rispettivamente il giorno, l&#39;ora
e il minuto in cui e&#39; finita la chiamata
- sia GGI sia GGF contengono valore interi (compresi tra 1 e 31) che rappresentano
il giorno del mese
- sia HHI sia HHF contengono valori interi (compresi tra 0 e 23) che rappresentano
un&#39;ora del giorno
- sia MMI sia MMF contengono valori interi (compresi tra 0 e 59) che rappresentano
un minuto di un&#39;ora

All&#39;interno del file sono presenti righe che iniziano con il carattere &#39;&#39;#”, inserite per
indicare il malfunzionamento delle celle.

##FUNZIONI DI SUPPORTO
"""

# funzioni

def calcolo_minuti(inizio,fine):
  minuti_iniziali=((inizio[0]*24)*60)+(inizio[1]*60)+inizio[2]
  minuti_finali=((fine[0]*24)*60)+(fine[1]*60)+fine[2]
  risultato=minuti_finali-minuti_iniziali+1

  return risultato

def calcolo_sconto(minuti):
  mensile=44640
  mesi=int(round(minuti/mensile))
  if(mesi==0):
   sconto=minuti-20
   return sconto

  sconto=minuti-(20*mesi)
  return sconto

"""##FUNZIONE UNO

ottieniDatiTelefonate(nomeFile).

La funzione accetta come unico parametro in ingresso il nome del file con i dati sulle
telefonate effettuate.
Nota bene: il nome del file da aprire e&#39; passato alla funzione come parametro. La
funzione dovra&#39; restituire una lista formata da tuple, dove ogni tupla contiene i seguenti
dati (ogni tupla corrisponde ad una telefonata):
(Cod_Chiamante, Cod_Destinatario, Cod_Cella_Chiamante, Cod_Cella_Destinatario,
Numeo_Minuti_Di_Conversazione ).

I minuti di conversazione si calcolano includendo anche il minuto di inizio della
conversazione, per esempio una telefonata iniziata alle (GGI;HHI;MMI) 10;14;30 e
terminata alle (GGF;HHF;MMF) 10;14;34 dura 5 minuti (34-30+1=5).
Nella tupla, i dati dovranno essere memorizzati sotto forma di valori interi.
Ci sono alcune righe del file che contengono dati sbagliati, nella lista restituita non
dovranno essere presenti le tuple corrispondenti alle righe con dati sbagliati.
Le righe che rispettano i criteri indicati qua di seguito sono da considerarsi corrette:
* Cod_Chiamante e Cod_Destinatario devono essere diversi (non sono ammesse
chiamate a se stessi)
* GGI, HHI, MMI devono appartenere ai rispettivi insiemi di valori come da
specifiche precedenti.
* L&#39;inizio della chiamata non puo&#39; essere successivo alla fine della chiamata.
- (GGI:HHI:MMI) 10:14:30 , (GGF:HHF:MMF) 10:14:34 Questa va bene
- (GGI:HHI:MMI) 21:10:10 , (GGF:HHF:MMF) 21:10:10 Questa va bene (la
telefonata dura un minuto)
- (GGI:HHI:MMI) 30:20:40 , (GGF:HHF:MMF) 30:20:30 Da eliminare
* Telefonate piu&#39; lunghe di 10 ore sono da considerarsi errori
Per il calcolo dei minuti di conversazione, si suggerisce di trasformare
(data,ora,minuto) in un intero corrispondente al numero di minuti trascorsi dall&#39;inizio del
mese. Siete invitati a creare delle funzioni accessorie per svolgere le operazioni
che si ripetono piu&#39; volte all&#39;interno del codice.
"""

def ottieniDatiTelefonate(nomeFile):
  Cod_Chiamante=[]
  Cod_Destinatario=[]
  Cod_Cella_Chiamante=[]
  Cod_Cella_Destinatario=[]
  inizio_chiamata=[]
  fine_chiamata=[]
  with open(nomeFile,'r') as file:
    next(file)
    for case in file:
      case=case.strip()
      case=case.split(';')
      #tolto il valore errato
      case[0]=case[0].replace('#','')
      case[0]=case[0].strip()
      Cod_Chiamante.append(case[0])
      #inserito tutti i valori rimanenti
      Cod_Destinatario.append(case[1])
      Cod_Cella_Chiamante.append(case[2])
      Cod_Cella_Destinatario.append(case[3])
      #pulito i numeri
      case[4]=case[4].split(':')
      inizio_chiamata.append([int(case[4][0]),int(case[4][1]),int(case[4][2])])
      case[5]=case[5].split(':')
      fine_chiamata.append([int(case[5][0]),int(case[5][1]),int(case[5][2])])

  lista_tuple=[]

  i=0
  while i < len(inizio_chiamata):
    # controlli
    if(Cod_Chiamante[i] == Cod_Destinatario[i]):
      i+=1
      continue

    min_chiamata=calcolo_minuti(inizio_chiamata[i],fine_chiamata[i])

    if(min_chiamata<0 ):
      i+=1
      continue
    if( min_chiamata>=600):
      i+=1
      continue

    lista_tuple.append(tuple([Cod_Chiamante[i], Cod_Destinatario[i], Cod_Cella_Chiamante[i], Cod_Cella_Destinatario[i],min_chiamata]))
    i+=1

  return lista_tuple

"""##FUNZIONE DUE

calcolaBollette(datiChiamate).

 La funzione accetta come parametro in ingresso la
struttura dati restituita dalla funzione precedente. La funzione dovra&#39; restituire un
dizionario di coppie chiave valore in cui la chiave e&#39; il codice del cliente e il valore e&#39; un
float corrispondente all&#39;importo che il cliente deve pagare per le chiamate effettuate nel
mese. La tariffazione delle chiamate avviene sulla base dei minuti di conversazione, un
cliente paga 0.10 euro (10 centesimi di euro) per ogni minuto di chiamata effettuata. Il
cliente che riceve la chiamata non paga niente.
Ogni cliente ha un bonus di 20 minuti gratuiti al mese, quindi il cliente paghera&#39;
solamente per i minuti eccedenti il bonus. Per esempio se il cliente 1 effettua chiamate
per 55 minuti e il cliente 2 effettua chiamate per 15 minuti, il dizionario restituito dovra&#39;
contenere: {1:3.5, 2:0}. Il cliente 1 ha 35 minuti eccedenti il bonus tariffati a 0.10
centesimi l&#39;uno. L&#39;insieme dei clienti contenuti nel dizionario e&#39; formato da quei clienti
che appaiono almeno una volta come chiamanti nella struttura dati fornita in ingresso.
"""

def calcolaBollette(datiChiamate):
  clienti={}
  for i in datiChiamate:
    if i[0]not in clienti:
      clienti[i[0]]=i[4]
    else:
      clienti[i[0]]+=i[4]
  for i in clienti:
    # print(i)
    clienti[i]=calcolo_sconto(clienti[i])
    risultato=round(clienti[i]*0.10,2)

    if(risultato<0):
      clienti[i]=0
    else:
      clienti[i]=risultato

  return clienti

"""##FUNZIONE TRE

calcolaCelleCongestionate(datiChiamate).

La funzione accetta come parametro in ingresso la struttura dati creata dalla funzione ottieniDatiTelefonate. La funzione deve identificare le celle (cioe&#39; le aree) che hanno un elevato carico di telefonate. Per far cio&#39;, dovete calcolare il totale delle telefonate fatte da una
cella. Considerate solo le telefonate in partenza da una cella, non le chiamate
ricevute. Poi, dovete fare la media. Sono da considerarsi congestionate le celle
nelle quali il numero di telefonate effettuate e&#39; maggiore alla media.La funzione
dovra&#39; restituire una lista con i codici delle celle congestionate.
"""

def calcolaCelleCongestionate(datiChiamate):
  celle={}
  tot_chiamate=0
  #prendiamo tutte le celle in entrata
  for i in datiChiamate:
    if i[2] not in celle:

      celle[i[2]]=1
      tot_chiamate+=1
    else:
      celle[i[2]]+=1
      tot_chiamate+=1

  media=int(round(tot_chiamate/len(celle)))
  #vediamo le celle congestionate
  celle_congestionate=[]
  for k ,value in celle.items():
    if (value>media):
      celle_congestionate.append(k)

  return celle_congestionate

"""##ESECUZIONE"""

funzione1=ottieniDatiTelefonate('telefonate.csv')
funzione2=calcolaBollette(funzione1)
calcolaCelleCongestionate(funzione1)